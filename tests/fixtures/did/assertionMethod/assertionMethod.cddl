DID-document = {

    "assertionMethod" : [ 1* publicKeyHex / ethereumAddress / publicKeyJwk / publicKeyBase58 / publicKeyGpg / did-url / relative-did-url ]

}

did = text .regexp "did\\:(?<method_name>[A-Za-z0-9]+)\\:(?<method_specific_id>[A-Za-z0-9\\.\\-\\:\\_]+)"

did-url = text .regexp "did\\:(?<did_method>[a-z0-9]+)\\:(?<did_method_identifier>[A-Za-z0-9\\.\\-\\:\\_]+)\\/?(?<path>[A-Za-z0-9\\/]+)\\??(?<query>[A-Za-z0-9\\=\\&\\%\\-\\:]+)?\\#?(?<fragment>[A-Za-z0-9\\-]+)?"

;; base URI value is the DID that is associated with the DID subject
relative-did-url = text .regexp "^#.+$"   ;  fragment identifier of self relative DID url, i.e. #key-1 in DID document with `id` = did:example:123456789abcdefghi becomes `did:example:123456789abcdefghi#key-1`


;;; 
; verificationMethod types included below for convenience
;;; 

publicKeyJwk = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "controller" : did
    "publicKeyJwk" : publicKeyEC / publicKeyoct / publicKeyed25519 / publicKeyRSA

}


;;; public key Hex is a type of verification method with public key encoded as base16
publicKeyHex = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "controller" : did 
    "publicKeyHex" : text .regexp "[a-zA-F0-9]+"     ; only allows for hexadecimal representations 
}

publicKeyGpg = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "controller" : did 
    "publicKeyGpg" : text                           ;  This could probbaly be better to capture -----BEGIN PGP PUBLIC KEY BLOCK  
}

;;; public key Hex is a type of verification method with the public key encoded as base58 
publicKeyBase58 = {
    "id" : did-url
    "type" : VerificationMethodTypes
    "controller" : did 
    "publicKeyBase58" : text .regexp "[a-zA-Z0-9]+"  ; only allows for base58 representations 
}


;;; ethereeum address is a type of verification method with ethereum address as public key information 
ethereumAddress = {
    "id" : did-url
    "type" : "EcdsaSecp256k1RecoveryMethod2020"     ; this is the only type known for ethereum address 
    "controller" : did 
    "ethereumAddress" :  text .regexp "0x[a-zA-F0-9]{40,40}"     ; only allows for hexadecimal representations
}



;;;
; below is a partial list of properties of various well-known JWK public key types. 
; as per https://github.com/w3c/did-core/issues/240, the is an active area of discussion 
; additional constraints are necessary to finalize the data definition all all JWK types
; below is a partial list of properties of various well-known JWK public key types. 
;;;; 


;;;
publicKeyEC = {
    "crv" : "P-256" / "P-384" / "P-521"
    "kty" : "EC"
    "x" : text 
    "y" : text 
    ? "kid" : text        ; should be sha256 fingerprint 
} 


;;; Octet sequence key for representing secret keys
publicKeyoct = {
    "kty" : "oct"
    ? "kid" : text ; this should be the sha256 fingerprint 
    "alg" : "HS256" / "HS384" / "HS512"
    "k" : text .size 32    ; for shared secret 
}


;; Octet key pair key like ed25519 
publicKeyed25519 = {
    "kty" : "OKP"
    "crv" : "Ed25519"
    "x"   : text .size 32
    "use" : "sig" / "enc"
    ? "kid" : text           ; should be sha256 fingerprint 
}



;;; RSA key type 
publicKeyRSA = {
    "alg" : "RSA"
    "mod" : text   ; 
    "exp" : text   ; 
    ? "kid" : text        ; should be sha256 fingerprint
}


; current list of all registered Verification Method classes
; These are classes not a properties - in other words, use them for the value of type in a verification method object.
VerificationMethodTypes = 
    "JsonWebKey2020" / 
    "Ed25519VerificationKey2018" / 
    "EcdsaSecp256k1VerificationKey2019" / 
    "SchnorrSecp256k1VerificationKey2019" /
    "Ed25519VerificationKey2018" / 
    "GpgVerificationKey2020" / 
    "RsaVerificationKey2018" / 
    "X25519KeyAgreementKey2019" /
    "EcdsaSecp256k1RecoveryMethod2020"
    